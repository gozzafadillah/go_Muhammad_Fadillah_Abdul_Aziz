// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	domain_users "github.com/gozzafadillah/27_Docker/praktikum/domain/users"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CheckEmailPassword provides a mock function with given fields: email, password
func (_m *Repository) CheckEmailPassword(email string, password string) (domain_users.Users, error) {
	ret := _m.Called(email, password)

	var r0 domain_users.Users
	if rf, ok := ret.Get(0).(func(string, string) domain_users.Users); ok {
		r0 = rf(email, password)
	} else {
		r0 = ret.Get(0).(domain_users.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUser provides a mock function with given fields:
func (_m *Repository) GetAllUser() []domain_users.Users {
	ret := _m.Called()

	var r0 []domain_users.Users
	if rf, ok := ret.Get(0).(func() []domain_users.Users); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain_users.Users)
		}
	}

	return r0
}

// Store provides a mock function with given fields: domain
func (_m *Repository) Store(domain domain_users.Users) (domain_users.Users, error) {
	ret := _m.Called(domain)

	var r0 domain_users.Users
	if rf, ok := ret.Get(0).(func(domain_users.Users) domain_users.Users); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(domain_users.Users)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(domain_users.Users) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t testing.TB) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
